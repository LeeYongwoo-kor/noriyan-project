import About from "@components/About";
import Access from "@components/Access";
import Footer from "@components/Footer";
import Info from "@components/Info";
import Menu from "@components/Menu";
import Navbar from "@components/Navbar";
import NavbarMobile from "@components/NavbarMobile";
import Notice from "@components/Notice";
import PhotoGallery from "@components/PhotoGallery";
import dynamic from "next/dynamic";
import Head from "next/head";
import { Suspense, useEffect, useRef, useState } from "react";
import { useMotionValueEvent, useScroll } from "framer-motion";

export type Kinds = "home" | "notice" | "concept" | "menu" | "info" | "access";

interface IUrlHash {
  home: number;
  notice: number;
  concept: number;
  menu: number;
  info: number;
  access: number;
}

const positionMap: IUrlHash = {
  home: 0,
  notice: 0,
  concept: 0,
  menu: 0,
  info: 0,
  access: 0,
};

function isMobile(userAgent: string) {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    userAgent
  );
}

const Main = dynamic(() => import("../components/Main"), {
  suspense: true,
  ssr: false,
});

function Home({ userAgent, menu }: any) {
  const [showNavBar, setShowNavbar] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [position, setPosition] = useState("home");
  const [throttle, setThrottle] = useState(false);
  // const menuInfo = useRef(menu);

  const navHeight = isMobile(userAgent) ? 0 : 40;

  const { scrollY } = useScroll();

  // useMotionValueEvent(scrollY, "change", (scroll) => {
  //   console.log("Page scroll ", scroll);
  // });

  const handleScroll = () => {
    // with throttling
    if (throttle) return;
    if (!throttle) {
      setThrottle(true);
      setTimeout(() => {
        const position = window.scrollY;
        setScrollPosition(position);
        setThrottle(false);
      }, 500);
    }
  };

  const handleMoveScreen = (position: string) => {
    const movePosition = positionMap[position] - navHeight * 2;

    window.scroll({
      top: movePosition,
      behavior: "smooth",
    });
  };

  useEffect(() => {
    console.log(scrollPosition);
    if (scrollPosition >= 100) {
      setShowNavbar(true);
    } else {
      setShowNavbar(false);
    }

    if (
      scrollPosition >= positionMap.concept &&
      scrollPosition < positionMap.menu - navHeight * 2
    ) {
      setPosition("concept");
    } else if (
      scrollPosition >= positionMap.menu - navHeight * 2 &&
      scrollPosition < positionMap.info - navHeight * 2
    ) {
      setPosition("menu");
    } else if (
      scrollPosition >= positionMap.info - navHeight * 2 &&
      scrollPosition < positionMap.access - navHeight * 2
    ) {
      setPosition("info");
    } else if (scrollPosition >= positionMap.access - navHeight * 2) {
      setPosition("access");
    } else {
      setPosition("home");
    }
  }, [scrollPosition, navHeight]);

  const noticeRef = useRef<HTMLInputElement>();
  const conceptRef = useRef<HTMLInputElement>();
  const menuRef = useRef<HTMLInputElement>();
  const infoRef = useRef<HTMLInputElement>();
  const accessRef = useRef<HTMLInputElement>();

  useEffect(() => {
    window.addEventListener("scroll", handleScroll, { passive: true });

    positionMap.notice = noticeRef.current?.getBoundingClientRect().top || 0;
    positionMap.concept = conceptRef.current?.getBoundingClientRect().top || 0;
    positionMap.access = accessRef.current?.getBoundingClientRect().top || 0;
    positionMap.menu = menuRef.current?.getBoundingClientRect().top || 0;
    positionMap.info = infoRef.current?.getBoundingClientRect().top || 0;

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <>
      <Head>
        <title>車道のりやん食堂</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="favicon" href="/favicon.ico" />
      </Head>
      <main className="font-murecho bg-[#ffffff]">
        <div id="wrapper" className="relative w-full h-auto mx-auto">
          <Navbar
            showNavBar={showNavBar}
            position={position}
            onClickCallback={handleMoveScreen}
          >
            <Suspense
              fallback={
                <div className="absolute inset-0 text-5xl">Loading...</div>
              }
            >
              <Main />
            </Suspense>
            <div className="sm:h-[54rem] h-144"></div>
            <Suspense fallback={<div>Loading Contents...</div>}>
              <div className="flex flex-col items-center justify-center w-full px-8 mx-auto max-w-7xl">
                <About innerRef={conceptRef} />
                <Notice innerRef={noticeRef} />
              </div>
              <div className="w-full mt-32 mb-10 bg-fixed bg-center bg-no-repeat bg-cover h-128 boss-image"></div>
              <div className="flex flex-col items-center justify-center w-full px-8 mx-auto max-w-7xl">
                <Menu innerRef={menuRef} menu={menu} />
              </div>
              <PhotoGallery />
              <div className="flex flex-col items-center justify-center w-full px-8 mx-auto max-w-7xl">
                <Access innerRef={accessRef} />
                <Info innerRef={infoRef} />
              </div>
            </Suspense>
            <Footer />
          </Navbar>
          <NavbarMobile
            hasTabBar
            position={position}
            onClickCallback={handleMoveScreen}
          />
        </div>
      </main>
    </>
  );
}

// export const getServerSideProps = ({ req }: any) => {
//   const userAgent = req.headers["user-agent"];
//   return { props: { userAgent } };
// };

export async function getStaticProps() {
  const res = await fetch("http://localhost:3000/api/menu");
  const menu = await res.json();

  return {
    props: {
      menu,
    },
    // revalidate: 86400,
  };
}

export default Home;
